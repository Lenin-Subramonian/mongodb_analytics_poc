{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2fd3a19f-88d6-4804-bba7-a503e80ec66a",
   "metadata": {},
   "source": [
    "# **Problem Statement**\n",
    "\n",
    "#### Analyze and assisting IFCO's Data Team in the analysis of some business data. For this purpose, you have been provided with two files:\n",
    "\n",
    "    1. orders.csv (which contains facmtual information regarding the orders received)\n",
    "    2. invoicing_data.json (which contains invoicing information)\n",
    "\n",
    "#### For this exercise, you can only use Python, PySpark or SQL (e.g. in dbt). Unit testing is essential for ensuring the reliability and correctness of your code. Please include appropriate unit tests for each task."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6031af9-1869-4411-94f4-7cf517269ec5",
   "metadata": {},
   "source": [
    "## Solution Approach.\n",
    "\n",
    "**1. Ingest orders data (CSV) into a dataframe.**\n",
    "\n",
    "        - Transform and clean the order data and create a view orders.**\n",
    "\n",
    "**3. Ingest invoices data (JSON) into a data frame, and create a view, invoices.**\n",
    "\n",
    "**4. Create a Order View (ORDER_VW)**\n",
    "\n",
    "    1. Derive the contact_full_name and in case of data not available, use the placeholder \"John Doe\".\n",
    "    2. The field for contact_address should adhere to the following information and format: \"city name, postal code\". \n",
    "    3. In the event that the city name is not available, the placeholder \"Unknown\" should be used. \n",
    "    4. Similarly, if the postal code is not known, the placeholder \"UNK00\" should be used.\n",
    "\n",
    "**5. Create a Salesowners View (SALESOWNERS_VW). Create a normalized view of sales owners.** \n",
    "\n",
    "**6. Create a Salesowners Commission View (sales_owner_commission_vw)**\n",
    "\n",
    "        - Identify the primary sales owner, Co-owner 1, and Co-owner 2 who have contributed to the acquisition.\n",
    "        - Join Orders and Invoices based on the order ID, and get the invoiced value.\n",
    "              * - Assumption: VAT is not included in the  calculation as the details are not clear. * \n",
    "        - Calculate the commissions based on the below procedure:\n",
    "               1. Main Owner: 6% of the net invoiced value.\n",
    "               2. Co-owner 1 (second in the list): 2.5% of the net invoiced value.\n",
    "               3. Co-owner 2 (third in the list): 0.95% of the net invoiced value.\n",
    "               4. The rest of the co-owners do not receive anything.\n",
    "               "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "24c6b8bf-947d-4a98-af72-99833d623eae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>date</th>\n",
       "      <th>company_id</th>\n",
       "      <th>company_name</th>\n",
       "      <th>crate_type</th>\n",
       "      <th>contact_data</th>\n",
       "      <th>salesowners</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>f47ac10b-58cc-4372-a567-0e02b2c3d479</td>\n",
       "      <td>29.01.22</td>\n",
       "      <td>1e2b47e6-499e-41c6-91d3-09d12dddfbbd</td>\n",
       "      <td>Fresh Fruits Co</td>\n",
       "      <td>Plastic</td>\n",
       "      <td>[{ \"contact_name\":\"Curtis\", \"contact_surname\":...</td>\n",
       "      <td>Leonard Cohen, Luke Skywalker, Ammy Winehouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>f47ac10b-58cc-4372-a567-0e02b2c3d480</td>\n",
       "      <td>21.02.22</td>\n",
       "      <td>0f05a8f1-2bdf-4be7-8c82-4c9b58f04898</td>\n",
       "      <td>Veggies Inc</td>\n",
       "      <td>Wood</td>\n",
       "      <td>[{ \"contact_name\":\"Maria\", \"contact_surname\":\"...</td>\n",
       "      <td>Luke Skywalker, David Goliat, Leon Leonov</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>f47ac10b-58cc-4372-a567-0e02b2c3d481</td>\n",
       "      <td>03.04.22</td>\n",
       "      <td>1e2b47e6-499e-41c6-91d3-09d12dddfbbd</td>\n",
       "      <td>Fresh Fruits c.o</td>\n",
       "      <td>Metal</td>\n",
       "      <td>[{ \"contact_name\":\"Para\", \"contact_surname\":\"C...</td>\n",
       "      <td>Luke Skywalker</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>f47ac10b-58cc-4372-a567-0e02b2c3d482</td>\n",
       "      <td>14.07.21</td>\n",
       "      <td>1c4b0b50-1d5d-463a-b56e-1a6fd3aeb7d6</td>\n",
       "      <td>Seafood Supplier</td>\n",
       "      <td>Plastic</td>\n",
       "      <td>NaN</td>\n",
       "      <td>David Goliat, Leonard Cohen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>f47ac10b-58cc-4372-a567-0e02b2c3d483</td>\n",
       "      <td>23.10.22</td>\n",
       "      <td>34538e39-cd2e-4641-8d24-3c94146e6f16</td>\n",
       "      <td>Meat Packers Ltd</td>\n",
       "      <td>Plastic</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Chris Pratt, David Henderson, Marianov Merschi...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               order_id      date  \\\n",
       "0  f47ac10b-58cc-4372-a567-0e02b2c3d479  29.01.22   \n",
       "1  f47ac10b-58cc-4372-a567-0e02b2c3d480  21.02.22   \n",
       "2  f47ac10b-58cc-4372-a567-0e02b2c3d481  03.04.22   \n",
       "3  f47ac10b-58cc-4372-a567-0e02b2c3d482  14.07.21   \n",
       "4  f47ac10b-58cc-4372-a567-0e02b2c3d483  23.10.22   \n",
       "\n",
       "                             company_id      company_name crate_type  \\\n",
       "0  1e2b47e6-499e-41c6-91d3-09d12dddfbbd   Fresh Fruits Co    Plastic   \n",
       "1  0f05a8f1-2bdf-4be7-8c82-4c9b58f04898       Veggies Inc       Wood   \n",
       "2  1e2b47e6-499e-41c6-91d3-09d12dddfbbd  Fresh Fruits c.o      Metal   \n",
       "3  1c4b0b50-1d5d-463a-b56e-1a6fd3aeb7d6  Seafood Supplier    Plastic   \n",
       "4  34538e39-cd2e-4641-8d24-3c94146e6f16  Meat Packers Ltd    Plastic   \n",
       "\n",
       "                                        contact_data  \\\n",
       "0  [{ \"contact_name\":\"Curtis\", \"contact_surname\":...   \n",
       "1  [{ \"contact_name\":\"Maria\", \"contact_surname\":\"...   \n",
       "2  [{ \"contact_name\":\"Para\", \"contact_surname\":\"C...   \n",
       "3                                                NaN   \n",
       "4                                                NaN   \n",
       "\n",
       "                                         salesowners  \n",
       "0      Leonard Cohen, Luke Skywalker, Ammy Winehouse  \n",
       "1          Luke Skywalker, David Goliat, Leon Leonov  \n",
       "2                                     Luke Skywalker  \n",
       "3                        David Goliat, Leonard Cohen  \n",
       "4  Chris Pratt, David Henderson, Marianov Merschi...  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv (\"data/orders.csv\", sep=';')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48cae39c-0444-4c57-a8c9-b01a40fb05be",
   "metadata": {},
   "source": [
    "# ** Data Ingestion - Orders **\n",
    "\n",
    "**1. Define schema for the input DataFrame, and also for the nested contact_data**\n",
    "    - Ensuring cp is treated as String for consistency\n",
    "    \n",
    "**2. Read the data into dataframe using the defined schema.**\n",
    "\n",
    "**3. Clean the data to convert to tabular format.**\n",
    "         - Clean the contact_data column by replacing \"\" with \"\n",
    "         - Clean the contact_data column by replacing the enclosing \" with empty string\n",
    "         - Ensure empty or null values are handled before parsing\n",
    "         \n",
    "**4. Parse the contact_data column into a nested structure**\n",
    "    - Flatten the nested JSON using explode if needed\n",
    "\n",
    "**5. Register DataFrame as a SQL temporary view**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bf5368c9-7b29-4c7a-b51e-81aebe94295b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Setting default log level to \"WARN\".\n",
      "To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n",
      "25/02/05 02:38:23 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n",
      "                                                                                "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------------------------+--------+------------------------------------+---------------------+----------+------------+---------------+------------------------+----------+------------------------------------------------------------+\n",
      "|order_id                            |date    |company_id                          |company_name         |crate_type|contact_name|contact_surname|contact_city            |contact_cp|salesowners                                                 |\n",
      "+------------------------------------+--------+------------------------------------+---------------------+----------+------------+---------------+------------------------+----------+------------------------------------------------------------+\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d479|29.01.22|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits Co      |Plastic   |[Curtis]    |[Jackson]      |[Chicago]               |[12345]   |Leonard Cohen, Luke Skywalker, Ammy Winehouse               |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d480|21.02.22|0f05a8f1-2bdf-4be7-8c82-4c9b58f04898|Veggies Inc          |Wood      |[Maria]     |[Theresa]      |[Calcutta]              |[NULL]    |Luke Skywalker, David Goliat, Leon Leonov                   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d481|03.04.22|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits c.o     |Metal     |[Para]      |[Cetamol]      |[Frankfurt am Oder]     |[3934]    |Luke Skywalker                                              |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d482|14.07.21|1c4b0b50-1d5d-463a-b56e-1a6fd3aeb7d6|Seafood Supplier     |Plastic   |NULL        |NULL           |NULL                    |NULL      |David Goliat, Leonard Cohen                                 |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d483|23.10.22|34538e39-cd2e-4641-8d24-3c94146e6f16|Meat Packers Ltd     |Plastic   |NULL        |NULL           |NULL                    |NULL      |Chris Pratt, David Henderson, Marianov Merschik, Leon Leonov|\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d484|15.05.22|fa14c3ed-3c48-49f4-bd69-4d7f5b5f4b1b|Green Veg Co         |Wood      |[John]      |[Krasinski]    |[New York]              |[1203]    |Leonard Cohen, David Henderson                              |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d485|31.12.22|2e90f2b1-d237-47a6-96e8-6d01c0d78c3e|Seafood Supplier GmbH|Metal     |NULL        |NULL           |NULL                    |NULL      |Markus Söder, Ammy Winehouse                                |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d486|01.04.22|acdb6f30-764f-404e-8b8e-7e7e3e6fa1a9|Organic Farms        |Metal     |[Jennifer]  |[Lopez]        |[Esplugues de Llobregat]|[NULL]    |David Henderson, Leonard Cohen, Leon Leonov                 |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d487|04.09.22|5f0bdbdf-1d84-4c23-957c-8bb8c0ddc89d|Tropical Fruits Ltd  |Plastic   |[Liav]      |[Ichenbaum]    |[Tel Aviv]              |[NULL]    |Yuri Gagarin, David Goliat, David Henderson                 |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d488|07.11.22|27c59f76-5d26-4b82-a89b-59f8dfd2e9a7|Healthy Snacks       |Plastic   |[Curtis]    |[Jackson]      |[Chicago]               |[12345]   |Ammy Winehouse, Marie Curie, Chris Pratt                    |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d489|09.07.22|20dfef10-8f4e-45a1-82fc-123f4ab2a4a5|healthy snacks c.o.  |Wood      |[Anthony]   |[Pap]          |[Barcelona]             |[8023]    |Marianov Merschik, Vladimir Chukov, Luke Skywalker          |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d490|18.06.22|4a98d9ec-65f6-438f-9a0c-0d9e1a6f7c65|Fresh Berries Inc    |Plastic   |[Natalia]   |[Romanov]      |[Moscow]                |[65432]   |Leonard Cohen, Ammy Winehouse                               |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d491|12.08.22|f3b70f8d-bb74-4d96-b1f2-88e5c0c68b14|Meat Express Ltd     |Metal     |[Bruce]     |[Wayne]        |[Gotham]                |[NULL]    |Chris Pratt, Marie Curie, Yuri Gagarin                      |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d492|22.09.22|83df789a-b30c-4a1b-8e67-1f512bfa20c7|Tropical Fresh Co    |Wood      |[Clark]     |[Kent]         |[Metropolis]            |[10001]   |Leonard Cohen, David Henderson, Ammy Winehouse              |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d493|27.10.22|9b31b19f-69a2-4aeb-8f6e-f4b8d2f9c12a|Veggies Unlimited    |Plastic   |NULL        |NULL           |NULL                    |NULL      |Leon Leonov, Ammy Winehouse                                 |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d494|15.11.22|d4e31b02-ea50-46b7-a8a1-43fdbb06e3fa|Global Seafood Co    |Metal     |[Tony]      |[Stark]        |[New York]              |[NULL]    |Yuri Gagarin, Leonard Cohen                                 |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d495|28.12.22|5c17d142-4b21-4293-8a34-8dcd2bc24f82|Fresh Farms Ltd      |Wood      |[Diana]     |[Prince]       |[Themyscira]            |[45789]   |David Goliat, Chris Pratt, Marie Curie                      |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d496|02.01.23|2b42dcb7-bc74-4e56-93f8-7612d5061d5f|Healthy Greens Co    |Plastic   |[Peter]     |[Parker]       |[Queens]                |[11432]   |Leonard Cohen, Ammy Winehouse, Marie Curie                  |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d497|19.02.23|6d3f48b2-4e3c-49d5-b437-735d537bb2a6|Fruits & Veggies Co  |Wood      |[Steve]     |[Rogers]       |[Brooklyn]              |[11201]   |Chris Pratt, Yuri Gagarin                                   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d498|11.03.23|1f06b236-f6b5-4f48-8c1c-7b55b5c7d6f7|Green Farms Inc      |Metal     |[Natasha]   |[Romanov]      |[Moscow]                |[65432]   |Ammy Winehouse, Leon Leonov                                 |\n",
      "+------------------------------------+--------+------------------------------------+---------------------+----------+------------+---------------+------------------------+----------+------------------------------------------------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "25/02/05 02:38:37 WARN SparkStringUtils: Truncated the string representation of a plan since it was too large. This behavior can be adjusted by setting 'spark.sql.debug.maxToStringFields'.\n",
      "[Stage 1:>                                                          (0 + 1) / 1]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+--------------------+--------+--------------------+-------------------+----------+--------------------+\n",
      "|summary|            order_id|    date|          company_id|       company_name|crate_type|         salesowners|\n",
      "+-------+--------------------+--------+--------------------+-------------------+----------+--------------------+\n",
      "|  count|                  62|      62|                  62|                 62|        62|                  62|\n",
      "|   mean|                NULL|    NULL|                NULL|               NULL|      NULL|                NULL|\n",
      "| stddev|                NULL|    NULL|                NULL|               NULL|      NULL|                NULL|\n",
      "|    min|f47ac10b-58cc-437...|01.04.22|012f20c6-00d5-4f4...|      Farm Fresh Co|     Metal|Ammy Winehouse, L...|\n",
      "|    max|f47ac10b-58cc-437...|31.12.22|fa14c3ed-3c48-49f...|healthy snacks c.o.|      Wood|Yuri Gagarin, Leo...|\n",
      "+-------+--------------------+--------+--------------------+-------------------+----------+--------------------+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                "
     ]
    }
   ],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.types import StructType, StructField, StringType, ArrayType\n",
    "from pyspark.sql.functions import col, from_json, trim, when, explode, regexp_replace, explode_outer\n",
    "\n",
    "# Initialize Spark session\n",
    "spark = SparkSession.builder.appName(\"OrderProcessing\").getOrCreate()\n",
    "\n",
    "# Define schema for the DataFrame\n",
    "schema = StructType([\n",
    "    StructField(\"order_id\", StringType(), True),\n",
    "    StructField(\"date\", StringType(), True),\n",
    "    StructField(\"company_id\", StringType(), True),\n",
    "    StructField(\"company_name\", StringType(), True),\n",
    "    StructField(\"crate_type\", StringType(), True),\n",
    "    StructField(\"contact_data\", StringType(), True),\n",
    "    StructField(\"salesowners\", StringType(), True)\n",
    "])\n",
    "\n",
    "# Define schema for contact_data (JSON array)\n",
    "contact_schema = ArrayType(\n",
    "    StructType([\n",
    "        StructField(\"contact_name\", StringType(), True),\n",
    "        StructField(\"contact_surname\", StringType(), True),\n",
    "        StructField(\"city\", StringType(), True),\n",
    "        StructField(\"cp\", StringType(), True)  # Ensuring cp is treated as String for consistency\n",
    "    ])\n",
    ")\n",
    "\n",
    "# Read the CSV file\n",
    "df = spark.read.option(\"header\", True).option(\"delimiter\", \";\").schema(schema).csv(\"data/orders.csv\")\n",
    "\n",
    "# Clean the contact_data column by replacing \"\" with \"\n",
    "df_temp2 = df.withColumn(\"contact_data\", regexp_replace(col(\"contact_data\"), '\"\"', '\"'))\n",
    "\n",
    "#df_temp2.show(truncate=False)\n",
    "\n",
    "# Clean the contact_data column by replacing the enclosing \" with empty string\n",
    "df_temp3 = df_temp2.withColumn(\"contact_data\", regexp_replace(col(\"contact_data\"), '^\"|\"$',''))\n",
    "\n",
    "#df_temp3.show(truncate=False)\n",
    "\n",
    "# Ensure empty or null values are handled before parsing\n",
    "df_cleaned = df_temp3.withColumn(\n",
    "    \"contact_data\",\n",
    "    when(col(\"contact_data\") == \"\", 'Unknown').otherwise(col(\"contact_data\"))\n",
    ")  \n",
    "\n",
    "# Parse the contact_data column into a nested structure\n",
    "df_parsed = df_cleaned.withColumn(\"contact_data_parsed\", from_json(col(\"contact_data\"), contact_schema))\n",
    "\n",
    "# # Show the result\n",
    "# df_parsed.show(truncate=False)\n",
    "\n",
    "# df_parsed.printSchema()\n",
    "\n",
    "# Flatten the nested JSON using explode if needed\n",
    "df_flattened = df_parsed.select(\n",
    "    \"order_id\", \n",
    "    \"date\", \n",
    "    \"company_id\",\n",
    "    \"company_name\", \n",
    "    \"crate_type\", \n",
    "    \"contact_data\",\n",
    "    \"contact_data_parsed\",\n",
    "    explode_outer(col(\"contact_data_parsed\")),\n",
    "    \"salesowners\"\n",
    ")\n",
    "\n",
    "# df_flattened.show(truncate=False)\n",
    "\n",
    "# df_flattened.printSchema()\n",
    "\n",
    "df_final = df_flattened.select(\n",
    "    \"order_id\",\n",
    "    \"date\",\n",
    "    \"company_id\",\n",
    "    \"company_name\",\n",
    "    \"crate_type\",\n",
    "    col(\"contact_data_parsed.contact_name\").alias(\"contact_name\"),\n",
    "    col(\"contact_data_parsed.contact_surname\").alias(\"contact_surname\"),\n",
    "    col(\"contact_data_parsed.city\").alias(\"contact_city\"),\n",
    "    col(\"contact_data_parsed.cp\").alias(\"contact_cp\"),\n",
    "    \"salesowners\"  \n",
    ")\n",
    "\n",
    "# Show results\n",
    "#df_final.show(truncate=False)\n",
    "\n",
    "# # Register DataFrame as a SQL temporary view\n",
    "df_final.createOrReplaceTempView(\"orders\")\n",
    "\n",
    "# # Run a Spark SQL query\n",
    "df_result = spark.sql(\"SELECT * FROM orders\")\n",
    "\n",
    "# # Show the results\n",
    "df_result.show(truncate=False)\n",
    "\n",
    "df_result.describe().show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26c513d4-fb61-4336-9d34-9f03df704817",
   "metadata": {},
   "source": [
    "# ** Data Ingestion - Invoices **\n",
    "\n",
    "    1. Load JSON file\n",
    "    2. Extract invoices array and flatten it\n",
    "    3. Register DataFrame as a SQL temporary view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "85446af1-af9b-4b74-b175-1e3f7cae1cfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "25/02/05 02:38:38 WARN SparkSession: Using an existing Spark session; only runtime SQL configurations will take effect.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------------------------+------------------------------------+------------------------------------+-----------+---+\n",
      "|invoice_id                          |order_id                            |company_id                          |gross_value|vat|\n",
      "+------------------------------------+------------------------------------+------------------------------------+-----------+---+\n",
      "|e1e1e1e1-e1e1-e1e1-e1e1-e1e1e1e1e1e1|f47ac10b-58cc-4372-a567-0e02b2c3d479|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|324222     |0  |\n",
      "|e2e2e2e2-e2e2-e2e2-e2e2-e2e2e2e2e2e2|f47ac10b-58cc-4372-a567-0e02b2c3d480|0f05a8f1-2bdf-4be7-8c82-4c9b58f04898|193498     |19 |\n",
      "|e3e3e3e3-e3e3-e3e3-e3e3-e3e3e3e3e3e3|f47ac10b-58cc-4372-a567-0e02b2c3d481|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|345498     |21 |\n",
      "|e4e4e4e4-e4e4-e4e4-e4e4-e4e4e4e4e4e4|f47ac10b-58cc-4372-a567-0e02b2c3d482|1c4b0b50-1d5d-463a-b56e-1a6fd3aeb7d6|245412     |34 |\n",
      "|e5e5e5e5-e5e5-e5e5-e5e5-e5e5e5e5e5e5|f47ac10b-58cc-4372-a567-0e02b2c3d483|34538e39-cd2e-4641-8d24-3c94146e6f16|145467     |0  |\n",
      "|e6e6e6e6-e6e6-e6e6-e6e6-e6e6e6e6e6e6|f47ac10b-58cc-4372-a567-0e02b2c3d484|fa14c3ed-3c48-49f4-bd69-4d7f5b5f4b1b|581530     |19 |\n",
      "|e7e7e7e7-e7e7-e7e7-e7e7-e7e7e7e7e7e7|f47ac10b-58cc-4372-a567-0e02b2c3d485|2e90f2b1-d237-47a6-96e8-6d01c0d78c3e|45100      |19 |\n",
      "|e8e8e8e8-e8e8-e8e8-e8e8-e8e8e8e8e8e8|f47ac10b-58cc-4372-a567-0e02b2c3d486|acdb6f30-764f-404e-8b8e-7e7e3e6fa1a9|565210     |21 |\n",
      "|e9e9e9e9-e9e9-e9e9-e9e9-e9e9e9e9e9e9|f47ac10b-58cc-4372-a567-0e02b2c3d487|5f0bdbdf-1d84-4c23-957c-8bb8c0ddc89d|345310     |34 |\n",
      "|ea9ea9ea-9ea9-9ea9-9ea9-9ea9ea9ea9ea|f47ac10b-58cc-4372-a567-0e02b2c3d487|5f0bdbdf-1d84-4c23-957c-8bb8c0ddc89d|345310     |34 |\n",
      "|eb0eb0eb-0eb0-0eb0-0eb0-0eb0eb0eb0eb|f47ac10b-58cc-4372-a567-0e02b2c3d488|27c59f76-5d26-4b82-a89b-59f8dfd2e9a7|341315     |21 |\n",
      "|ec1ec1ec-1ec1-1ec1-1ec1-1ec1ec1ec1ec|f47ac10b-58cc-4372-a567-0e02b2c3d489|20dfef10-8f4e-45a1-82fc-123f4ab2a4a5|291315     |0  |\n",
      "+------------------------------------+------------------------------------+------------------------------------+-----------+---+\n",
      "\n",
      "+-------+--------------------+--------------------+--------------------+-----------------+------------------+\n",
      "|summary|          invoice_id|            order_id|          company_id|      gross_value|               vat|\n",
      "+-------+--------------------+--------------------+--------------------+-----------------+------------------+\n",
      "|  count|                  12|                  12|                  12|               12|                12|\n",
      "|   mean|                NULL|                NULL|                NULL|314098.9166666667|              18.5|\n",
      "| stddev|                NULL|                NULL|                NULL|153425.2081222511|12.674240160118618|\n",
      "|    min|e1e1e1e1-e1e1-e1e...|f47ac10b-58cc-437...|0f05a8f1-2bdf-4be...|           145467|                 0|\n",
      "|    max|ec1ec1ec-1ec1-1ec...|f47ac10b-58cc-437...|fa14c3ed-3c48-49f...|           581530|                34|\n",
      "+-------+--------------------+--------------------+--------------------+-----------------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.functions import explode, col\n",
    "\n",
    "# Initialize Spark Session\n",
    "spark = SparkSession.builder.appName(\"InvoiceProcessing\").getOrCreate()\n",
    "\n",
    "# Load JSON file\n",
    "df = spark.read.option(\"multiline\", \"true\").json(\"data/invoicing_data.json\")\n",
    "\n",
    "# Extract invoices array and flatten it\n",
    "df_flattened = df.select(explode(col(\"data.invoices\")).alias(\"invoice\")).select(\n",
    "    col(\"invoice.id\").alias(\"invoice_id\"),\n",
    "    col(\"invoice.orderId\").alias(\"order_id\"),\n",
    "    col(\"invoice.companyId\").alias(\"company_id\"),\n",
    "    col(\"invoice.grossValue\").alias(\"gross_value\"),\n",
    "    col(\"invoice.vat\").alias(\"vat\")\n",
    ")\n",
    "\n",
    "# Show the result\n",
    "# df_flattened.show(truncate=False)\n",
    "\n",
    "# # Register DataFrame as a SQL temporary view\n",
    "df_flattened.createOrReplaceTempView(\"invoices\")\n",
    "\n",
    "# # Run a Spark SQL query\n",
    "df_invoices = spark.sql(\"SELECT * FROM invoices\")\n",
    "\n",
    "# # Show the results\n",
    "df_invoices.show(truncate=False)\n",
    "\n",
    "df_invoices.describe().show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fa28d9c-373a-412d-94bf-f95224a5e24b",
   "metadata": {},
   "source": [
    "# Create a Order View (ORDER_VW)\n",
    "\n",
    "## Apply below transformations: \n",
    "    1. The contact_full_name field must contain the full name of the contact. In case this information is not available, the placeholder \"John Doe\" should be utilized.\n",
    "    2. The field for contact_address should adhere to the following information and format: \"city name, postal code\". \n",
    "    3. In the event that the city name is not available, the placeholder \"Unknown\" should be used. \n",
    "    4. Similarly, if the postal code is not known, the placeholder \"UNK00\" should be used.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aa16635c-f3a3-4aa7-a964-2465f27a60dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------------------------+--------+------------------------------------+---------------------+----------+------------+---------------+-----------------+----------------------+----------+------------------------------------------------------------+\n",
      "|order_id                            |date    |company_id                          |company_name         |crate_type|contact_name|contact_surname|contact_full_name|contact_city          |contact_cp|salesowners                                                 |\n",
      "+------------------------------------+--------+------------------------------------+---------------------+----------+------------+---------------+-----------------+----------------------+----------+------------------------------------------------------------+\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d479|29.01.22|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits Co      |Plastic   |Curtis      |Jackson        |Curtis Jackson   |Chicago               |12345     |Leonard Cohen, Luke Skywalker, Ammy Winehouse               |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d480|21.02.22|0f05a8f1-2bdf-4be7-8c82-4c9b58f04898|Veggies Inc          |Wood      |Maria       |Theresa        |Maria Theresa    |Calcutta              |UNK00     |Luke Skywalker, David Goliat, Leon Leonov                   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d481|03.04.22|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits c.o     |Metal     |Para        |Cetamol        |Para Cetamol     |Frankfurt am Oder     |3934      |Luke Skywalker                                              |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d482|14.07.21|1c4b0b50-1d5d-463a-b56e-1a6fd3aeb7d6|Seafood Supplier     |Plastic   |NULL        |NULL           |John Doe         |Unknown               |UNK00     |David Goliat, Leonard Cohen                                 |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d483|23.10.22|34538e39-cd2e-4641-8d24-3c94146e6f16|Meat Packers Ltd     |Plastic   |NULL        |NULL           |John Doe         |Unknown               |UNK00     |Chris Pratt, David Henderson, Marianov Merschik, Leon Leonov|\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d484|15.05.22|fa14c3ed-3c48-49f4-bd69-4d7f5b5f4b1b|Green Veg Co         |Wood      |John        |Krasinski      |John Krasinski   |New York              |1203      |Leonard Cohen, David Henderson                              |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d485|31.12.22|2e90f2b1-d237-47a6-96e8-6d01c0d78c3e|Seafood Supplier GmbH|Metal     |NULL        |NULL           |John Doe         |Unknown               |UNK00     |Markus Söder, Ammy Winehouse                                |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d486|01.04.22|acdb6f30-764f-404e-8b8e-7e7e3e6fa1a9|Organic Farms        |Metal     |Jennifer    |Lopez          |Jennifer Lopez   |Esplugues de Llobregat|UNK00     |David Henderson, Leonard Cohen, Leon Leonov                 |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d487|04.09.22|5f0bdbdf-1d84-4c23-957c-8bb8c0ddc89d|Tropical Fruits Ltd  |Plastic   |Liav        |Ichenbaum      |Liav Ichenbaum   |Tel Aviv              |UNK00     |Yuri Gagarin, David Goliat, David Henderson                 |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d488|07.11.22|27c59f76-5d26-4b82-a89b-59f8dfd2e9a7|Healthy Snacks       |Plastic   |Curtis      |Jackson        |Curtis Jackson   |Chicago               |12345     |Ammy Winehouse, Marie Curie, Chris Pratt                    |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d489|09.07.22|20dfef10-8f4e-45a1-82fc-123f4ab2a4a5|healthy snacks c.o.  |Wood      |Anthony     |Pap            |Anthony Pap      |Barcelona             |8023      |Marianov Merschik, Vladimir Chukov, Luke Skywalker          |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d490|18.06.22|4a98d9ec-65f6-438f-9a0c-0d9e1a6f7c65|Fresh Berries Inc    |Plastic   |Natalia     |Romanov        |Natalia Romanov  |Moscow                |65432     |Leonard Cohen, Ammy Winehouse                               |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d491|12.08.22|f3b70f8d-bb74-4d96-b1f2-88e5c0c68b14|Meat Express Ltd     |Metal     |Bruce       |Wayne          |Bruce Wayne      |Gotham                |UNK00     |Chris Pratt, Marie Curie, Yuri Gagarin                      |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d492|22.09.22|83df789a-b30c-4a1b-8e67-1f512bfa20c7|Tropical Fresh Co    |Wood      |Clark       |Kent           |Clark Kent       |Metropolis            |10001     |Leonard Cohen, David Henderson, Ammy Winehouse              |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d493|27.10.22|9b31b19f-69a2-4aeb-8f6e-f4b8d2f9c12a|Veggies Unlimited    |Plastic   |NULL        |NULL           |John Doe         |Unknown               |UNK00     |Leon Leonov, Ammy Winehouse                                 |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d494|15.11.22|d4e31b02-ea50-46b7-a8a1-43fdbb06e3fa|Global Seafood Co    |Metal     |Tony        |Stark          |Tony Stark       |New York              |UNK00     |Yuri Gagarin, Leonard Cohen                                 |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d495|28.12.22|5c17d142-4b21-4293-8a34-8dcd2bc24f82|Fresh Farms Ltd      |Wood      |Diana       |Prince         |Diana Prince     |Themyscira            |45789     |David Goliat, Chris Pratt, Marie Curie                      |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d496|02.01.23|2b42dcb7-bc74-4e56-93f8-7612d5061d5f|Healthy Greens Co    |Plastic   |Peter       |Parker         |Peter Parker     |Queens                |11432     |Leonard Cohen, Ammy Winehouse, Marie Curie                  |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d497|19.02.23|6d3f48b2-4e3c-49d5-b437-735d537bb2a6|Fruits & Veggies Co  |Wood      |Steve       |Rogers         |Steve Rogers     |Brooklyn              |11201     |Chris Pratt, Yuri Gagarin                                   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d498|11.03.23|1f06b236-f6b5-4f48-8c1c-7b55b5c7d6f7|Green Farms Inc      |Metal     |Natasha     |Romanov        |Natasha Romanov  |Moscow                |65432     |Ammy Winehouse, Leon Leonov                                 |\n",
      "+------------------------------------+--------+------------------------------------+---------------------+----------+------------+---------------+-----------------+----------------------+----------+------------------------------------------------------------+\n",
      "only showing top 20 rows\n",
      "\n",
      "+-------+--------------------+--------+--------------------+-------------------+----------+------------+---------------+-----------------+------------+-----------------+--------------------+\n",
      "|summary|            order_id|    date|          company_id|       company_name|crate_type|contact_name|contact_surname|contact_full_name|contact_city|       contact_cp|         salesowners|\n",
      "+-------+--------------------+--------+--------------------+-------------------+----------+------------+---------------+-----------------+------------+-----------------+--------------------+\n",
      "|  count|                  62|      62|                  62|                 62|        62|          44|             44|               62|          62|               62|                  62|\n",
      "|   mean|                NULL|    NULL|                NULL|               NULL|      NULL|        NULL|           NULL|             NULL|        NULL|          26660.0|                NULL|\n",
      "| stddev|                NULL|    NULL|                NULL|               NULL|      NULL|        NULL|           NULL|             NULL|        NULL|28503.83385909108|                NULL|\n",
      "|    min|f47ac10b-58cc-437...|01.04.22|012f20c6-00d5-4f4...|      Farm Fresh Co|     Metal|     Anthony|          Allen|      Anthony Pap|   Barcelona|            10001|Ammy Winehouse, L...|\n",
      "|    max|f47ac10b-58cc-437...|31.12.22|fa14c3ed-3c48-49f...|healthy snacks c.o.|      Wood|        Tony|          Wayne|       Tony Stark|     Unknown|            UNK00|Yuri Gagarin, Leo...|\n",
      "+-------+--------------------+--------+--------------------+-------------------+----------+------------+---------------+-----------------+------------+-----------------+--------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# # Run a Spark SQL query\n",
    "#df_trans = spark.sql(\"SELECT * FROM orders limit 5\")\n",
    "#df_1 = spark.sql(\"SELECT order_id, (contact_name[0]|| ' '||contact_surname[0]) as contact_full_name FROM orders \\\n",
    "#where order_id in ('f47ac10b-58cc-4372-a567-0e02b2c3d482','f47ac10b-58cc-4372-a567-0e02b2c3d483','f47ac10b-58cc-4372-a567-0e02b2c3d484',\\\n",
    "#'f47ac10b-58cc-4372-a567-0e02b2c3d485')\")\n",
    "\n",
    "#df_trans.printSchema()   \n",
    "\n",
    "# SQL query for the view\n",
    "sql_query = \"\"\"\n",
    "    select \n",
    "        order_id, \n",
    "        date, \n",
    "        company_id,\n",
    "        company_name, \n",
    "        crate_type,\n",
    "        contact_name[0] as contact_name,  \n",
    "        contact_surname[0] as contact_surname, \n",
    "        nvl((contact_name[0]|| ' '||contact_surname[0]), 'John Doe') as contact_full_name,\n",
    "        nvl(contact_city[0], 'Unknown') as contact_city, \n",
    "        nvl(contact_cp[0],'UNK00') as contact_cp, \n",
    "        salesowners\n",
    "    from orders\n",
    "\"\"\"\n",
    "# Execute SQL query\n",
    "df_trans = spark.sql(sql_query)\n",
    "\n",
    "df_trans.createOrReplaceTempView(\"orders_vw\")\n",
    "\n",
    "df_trans.show(truncate=False)\n",
    "\n",
    "df_trans.describe().show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e0395c5-00e3-42b9-b3eb-9a66888c526e",
   "metadata": {},
   "source": [
    "# Test 1: Distribution of Crate Type per Company\n",
    "## Calculate the distribution of crate types per company (number of orders per type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "78b8f058-50c4-4a4b-9319-047f7ce570a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------------------------+---------------------+----------+-----------------------+\n",
      "|company_id                          |company_name         |crate_type|crate_type_distribution|\n",
      "+------------------------------------+---------------------+----------+-----------------------+\n",
      "|012f20c6-00d5-4f45-999f-12e7639db623|Green World Ltd      |Plastic   |1                      |\n",
      "|063a7dc7-b93a-4f38-b7f0-0e30b5b217ac|Fruit Kings Ltd      |Wood      |1                      |\n",
      "|0b8755d4-3d28-4039-b9a7-b30cb5ff02ea|Seafood Network Ltd  |Wood      |1                      |\n",
      "|0d09ae2b-d9a5-4d67-bb97-963be9379b4e|Healthy Eats Ltd     |Plastic   |1                      |\n",
      "|0f05a8f1-2bdf-4be7-8c82-4c9b58f04898|Veggies Inc          |Wood      |2                      |\n",
      "|0f05a8f1-2bdf-4be7-8c82-4c9b58f04898|Veggies Inc          |Plastic   |1                      |\n",
      "|1b21f4a3-22d2-43f2-ae3f-e254d282d9e0|Fresh Veg Co         |Metal     |1                      |\n",
      "|1c4b0b50-1d5d-463a-b56e-1a6fd3aeb7d6|Seafood Supplier     |Plastic   |3                      |\n",
      "|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits Co      |Metal     |3                      |\n",
      "|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits Co      |Wood      |1                      |\n",
      "|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits Co      |Plastic   |2                      |\n",
      "|1f06b236-f6b5-4f48-8c1c-7b55b5c7d6f7|Green Farms Inc      |Metal     |1                      |\n",
      "|20dfef10-8f4e-45a1-82fc-123f4ab2a4a5|Healthy Snacks Co    |Wood      |2                      |\n",
      "|2122bb43-1a5e-4f8d-8bb9-4987c9d4a8df|Farm Fresh Ltd       |Plastic   |1                      |\n",
      "|27c59f76-5d26-4b82-a89b-59f8dfd2e9a7|Healthy Snacks       |Plastic   |2                      |\n",
      "|2b42dcb7-bc74-4e56-93f8-7612d5061d5f|Healthy Greens Co    |Plastic   |1                      |\n",
      "|2e90f2b1-d237-47a6-96e8-6d01c0d78c3e|Seafood Supplier GmbH|Metal     |3                      |\n",
      "|34538e39-cd2e-4641-8d24-3c94146e6f16|Meat Packers Ltd     |Plastic   |3                      |\n",
      "|4a7561b1-1de1-420a-93ed-2c12a5bbd1ab|Farms Global Co      |Metal     |1                      |\n",
      "|4a98d9ec-65f6-438f-9a0c-0d9e1a6f7c65|Fresh Berries Inc    |Plastic   |1                      |\n",
      "+------------------------------------+---------------------+----------+-----------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# df_1 = spark.sql(\"SELECT order_id, contact_full_name, contact_city,contact_cp   FROM orders_vw \\\n",
    "# where order_id in ('f47ac10b-58cc-4372-a567-0e02b2c3d482','f47ac10b-58cc-4372-a567-0e02b2c3d483','f47ac10b-58cc-4372-a567-0e02b2c3d484',\\\n",
    "# 'f47ac10b-58cc-4372-a567-0e02b2c3d485')\")\n",
    "\n",
    "sql_query = \"\"\"\n",
    "    with get_unique_company_name as \n",
    "    (\n",
    "     select Company_id, company_name \n",
    "     from (\n",
    "         select company_id, company_name, ROW_NUMBER() OVER (PARTITION BY Company_id ORDER BY company_name asc) AS row_num \n",
    "         from orders_vw\n",
    "         )\n",
    "     where row_num=1\n",
    "     )\n",
    "    SELECT \n",
    "        ord.company_id,\n",
    "        gc.company_name, \n",
    "        ord.crate_type, \n",
    "        count(ord.order_id) as crate_type_distribution \n",
    "    FROM orders_vw ord inner join get_unique_company_name gc on ord.company_id = gc.company_id\n",
    "    group by 1, 2,3 \n",
    "    order by 1, 2\n",
    "\"\"\"\n",
    "\n",
    "df_distribution = spark.sql(sql_query)\n",
    "\n",
    "df_distribution.show(truncate=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a9feac7-d58b-4ab1-801e-85725b1b0c89",
   "metadata": {},
   "source": [
    "# ** Test 2: DataFrame of Orders with Full Name of the Contact **\n",
    "\n",
    "### Requirements:\n",
    "    1. order_id - The order_id field must contain the unique identifier of the order.\n",
    "    2. contact_full_name - The contact_full_name field must contain the full name of the contact. In case this information is not available, the placeholder \"John Doe\" should be utilized.\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8e59059b-489d-4ae6-8d07-eb0ef2aae457",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------------------------+-----------------+\n",
      "|order_id                            |contact_full_name|\n",
      "+------------------------------------+-----------------+\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d491|Bruce Wayne      |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d516|Bruce Wayne      |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d481|Para Cetamol     |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d492|Clark Kent       |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d512|Curtis Jackson   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d484|John Krasinski   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d529|Curtis Jackson   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d501|Barry Allen      |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d503|John Doe         |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d504|Diana Prince     |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d508|John Doe         |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d479|Curtis Jackson   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d535|John Krasinski   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d489|Anthony Pap      |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d502|Clark Kent       |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d514|John Doe         |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d499|Bruce Banner     |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d482|John Doe         |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d483|John Doe         |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d526|John Doe         |\n",
      "+------------------------------------+-----------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# df_1 = spark.sql(\"SELECT order_id, contact_full_name, contact_city,contact_cp   FROM orders_vw \\\n",
    "# where order_id in ('f47ac10b-58cc-4372-a567-0e02b2c3d482','f47ac10b-58cc-4372-a567-0e02b2c3d483','f47ac10b-58cc-4372-a567-0e02b2c3d484',\\\n",
    "# 'f47ac10b-58cc-4372-a567-0e02b2c3d485')\")\n",
    "\n",
    "df_1 = spark.sql(\"SELECT order_id, contact_full_name  FROM orders_vw group by 1, 2\")\n",
    "\n",
    "df_1.show(truncate=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47cf6856-f937-4de0-9ad1-d0f23059c022",
   "metadata": {},
   "source": [
    "# Test 3: DataFrame of Orders with Contact Address\n",
    "\n",
    "### Requirements:\n",
    "    1. order_id - The order_id field must contain the unique identifier of the order.\n",
    "    2. contact_address - The field for contact_address should adhere to the following information and format: \"city name, postal code\". \n",
    "            - In the event that the city name is not available, the placeholder \"Unknown\" should be used. \n",
    "            - Similarly, if the postal code is not known, the placeholder \"UNK00\" should be used.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f850c4c3-264e-4dc9-9ab3-37590e9ccbe4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------------------------+----------------------------+\n",
      "|order_id                            |contact_address             |\n",
      "+------------------------------------+----------------------------+\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d479|Chicago,12345               |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d480|Calcutta,UNK00              |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d481|Frankfurt am Oder,3934      |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d482|Unknown,UNK00               |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d483|Unknown,UNK00               |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d484|New York,1203               |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d485|Unknown,UNK00               |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d486|Esplugues de Llobregat,UNK00|\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d487|Tel Aviv,UNK00              |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d488|Chicago,12345               |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d489|Barcelona,8023              |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d490|Moscow,65432                |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d491|Gotham,UNK00                |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d492|Metropolis,10001            |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d493|Unknown,UNK00               |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d494|New York,UNK00              |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d495|Themyscira,45789            |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d496|Queens,11432                |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d497|Brooklyn,11201              |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d498|Moscow,65432                |\n",
      "+------------------------------------+----------------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# df_1 = spark.sql(\"SELECT order_id, contact_full_name, contact_city,contact_cp   FROM orders_vw \\\n",
    "# where order_id in ('f47ac10b-58cc-4372-a567-0e02b2c3d482','f47ac10b-58cc-4372-a567-0e02b2c3d483','f47ac10b-58cc-4372-a567-0e02b2c3d484',\\\n",
    "# 'f47ac10b-58cc-4372-a567-0e02b2c3d485')\")\n",
    "\n",
    "df_2 = spark.sql(\"SELECT order_id, contact_city || ','||contact_cp as contact_address FROM orders_vw\")\n",
    "\n",
    "df_2.show(truncate=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac8223f5-a86b-4d82-a0c5-70b23fddcac3",
   "metadata": {},
   "source": [
    "# Create a Salesowners View (SALESOWNERS_VW)\n",
    "\n",
    "## Create a normalized view of sales owners. \n",
    "## Highlevel Approach:\n",
    "    1. SPLIT(salesowners, ', ') → Splits the salesowners string into an array based on , (comma and space).\n",
    "    2. EXPLODE() → Converts the array into multiple rows (one for each name).\n",
    "    3. TRIM(salesowner) → Removes any leading or trailing spaces from names\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8592fab6-01bb-4120-b68c-e971c5e42ce1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------------------------+-------------------+---------------+\n",
      "|Company_id                          |company_name       |salesowner     |\n",
      "+------------------------------------+-------------------+---------------+\n",
      "|012f20c6-00d5-4f45-999f-12e7639db623|Green World Ltd    |Chris Pratt    |\n",
      "|012f20c6-00d5-4f45-999f-12e7639db623|Green World Ltd    |David Goliat   |\n",
      "|063a7dc7-b93a-4f38-b7f0-0e30b5b217ac|Fruit Kings Ltd    |David Goliat   |\n",
      "|063a7dc7-b93a-4f38-b7f0-0e30b5b217ac|Fruit Kings Ltd    |Leon Leonov    |\n",
      "|0b8755d4-3d28-4039-b9a7-b30cb5ff02ea|Seafood Network Ltd|Ammy Winehouse |\n",
      "|0b8755d4-3d28-4039-b9a7-b30cb5ff02ea|Seafood Network Ltd|David Goliat   |\n",
      "|0b8755d4-3d28-4039-b9a7-b30cb5ff02ea|Seafood Network Ltd|Leon Leonov    |\n",
      "|0d09ae2b-d9a5-4d67-bb97-963be9379b4e|Healthy Eats Ltd   |Ammy Winehouse |\n",
      "|0d09ae2b-d9a5-4d67-bb97-963be9379b4e|Healthy Eats Ltd   |Yuri Gagarin   |\n",
      "|0f05a8f1-2bdf-4be7-8c82-4c9b58f04898|Veggies Inc        |David Goliat   |\n",
      "|0f05a8f1-2bdf-4be7-8c82-4c9b58f04898|Veggies Inc        |Leon Leonov    |\n",
      "|0f05a8f1-2bdf-4be7-8c82-4c9b58f04898|Veggies Inc        |Leonard Cohen  |\n",
      "|0f05a8f1-2bdf-4be7-8c82-4c9b58f04898|Veggies Inc        |Luke Skywalker |\n",
      "|1b21f4a3-22d2-43f2-ae3f-e254d282d9e0|Fresh Veg Co       |David Henderson|\n",
      "|1b21f4a3-22d2-43f2-ae3f-e254d282d9e0|Fresh Veg Co       |Leonard Cohen  |\n",
      "|1c4b0b50-1d5d-463a-b56e-1a6fd3aeb7d6|Seafood Supplier   |David Goliat   |\n",
      "|1c4b0b50-1d5d-463a-b56e-1a6fd3aeb7d6|Seafood Supplier   |Leonard Cohen  |\n",
      "|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits Co    |Ammy Winehouse |\n",
      "|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits Co    |David Henderson|\n",
      "|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits Co    |Leon Leonov    |\n",
      "+------------------------------------+-------------------+---------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Company id\n",
    "# 1e2b47e6-499e-41c6-91d3-09d12dddfbbd Fresh Fruits Co\n",
    "# 27c59f76-5d26-4b82-a89b-59f8dfd2e9a7 Healthy Snacks\n",
    "# 20dfef10-8f4e-45a1-82fc-123f4ab2a4a5 Healthy Snacks Co\n",
    "\n",
    "\n",
    "# Execute Spark SQL\n",
    "df_sales_owners = spark.sql(\"\"\"\n",
    "    with get_salesowners as \n",
    "    (\n",
    "    SELECT \n",
    "        Company_id,\n",
    "        company_name,\n",
    "        TRIM(salesowner) AS salesowner\n",
    "    FROM (\n",
    "        SELECT \n",
    "            Company_id, \n",
    "            company_name, \n",
    "            EXPLODE(SPLIT(salesowners, ',')) AS salesowner\n",
    "        FROM orders_vw \n",
    "            --where company_id='1e2b47e6-499e-41c6-91d3-09d12dddfbbd'\n",
    "            --where company_id in ('27c59f76-5d26-4b82-a89b-59f8dfd2e9a7', '20dfef10-8f4e-45a1-82fc-123f4ab2a4a5')\n",
    "            )\n",
    "        group by 1,2,3\n",
    "    ),\n",
    "    get_unique_salesowners as \n",
    "    (\n",
    "      SELECT \n",
    "            Company_id, \n",
    "            salesowner\n",
    "        FROM get_salesowners \n",
    "         group by 1,2\n",
    "    ),\n",
    "    get_unique_company as \n",
    "    (\n",
    "     select Company_id, company_name \n",
    "     from (\n",
    "         select Company_id, company_name, ROW_NUMBER() OVER (PARTITION BY Company_id ORDER BY company_name) AS row_num \n",
    "         from get_salesowners\n",
    "         )\n",
    "     where row_num=1\n",
    "    )\n",
    "    Select gs.Company_id, gc.company_name, gs.salesowner\n",
    "    from get_unique_salesowners gs inner join get_unique_company gc on gs.Company_id = gc.Company_id\n",
    "    order by 1, 3 asc\n",
    "    \"\"\")\n",
    "\n",
    "# Show the result\n",
    "df_sales_owners.show(truncate=False)\n",
    "\n",
    "df_sales_owners.createOrReplaceTempView(\"salesowners_vw\")\n",
    "\n",
    "#df_3.show(truncate=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36c79e60-776b-41d7-95c1-a9f1d7f329d3",
   "metadata": {},
   "source": [
    "# Test 5: DataFrame of Companies with Sales Owners\n",
    "\n",
    "## Requirements:\n",
    "    1. company_id - The company_id field must contain the unique identifier of the company.\n",
    "    2. company_name - The company_name field must contain the name of the company.\n",
    "    3. list_salesowners - The list_salesowners field should contain a unique and comma-separated list of salespeople who have participated in at least one order of the company. \n",
    "    4. Please ensure that the list is sorted in ascending alphabetical order of the first name.\n",
    "\n",
    "## Solution Approach:\n",
    "    1. COLLECT_LIST(salesowner) → Gathers all salesowner values for each Company_id into an array.\n",
    "    2. SORT_ARRAY(COLLECT_LIST(salesowner)) → Sorts the list in ascending order.\n",
    "    3. CONCAT_WS(', ', ...) → Converts the sorted list into a comma-separated string.\n",
    "    4. In case of duplicate companies stored under multiple IDs, one name of the company is used ( for eg: Healthy Snacks v/s Healthy Snacks Co, selected one name for the report to eliminate duplicate. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "09677a86-559f-49ba-b559-9196f4786cc0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------------------------+---------------------+---------------------------------------------------------------------------+\n",
      "|Company_id                          |company_name         |list_salesowners                                                           |\n",
      "+------------------------------------+---------------------+---------------------------------------------------------------------------+\n",
      "|fa14c3ed-3c48-49f4-bd69-4d7f5b5f4b1b|Green Veg Co         |Ammy Winehouse, Chris Pratt, David Henderson, Leonard Cohen, Luke Skywalker|\n",
      "|d66c0c95-1f86-4d55-9245-bfa98c0f8dcb|Healthy Choices Co   |Ammy Winehouse, Chris Pratt, Leon Leonov                                   |\n",
      "|8f1c5d4a-9045-4be5-bb38-7f587f478a92|Farm Fresh Co        |Ammy Winehouse, Chris Pratt, Leonard Cohen                                 |\n",
      "|7f80fdd9-1c1a-4ad4-9348-19e6b2b44bde|Veggie Haven Co      |Ammy Winehouse, Chris Pratt, Leonard Cohen                                 |\n",
      "|27c59f76-5d26-4b82-a89b-59f8dfd2e9a7|Healthy Snacks       |Ammy Winehouse, Chris Pratt, Marie Curie                                   |\n",
      "|0b8755d4-3d28-4039-b9a7-b30cb5ff02ea|Seafood Network Ltd  |Ammy Winehouse, David Goliat, Leon Leonov                                  |\n",
      "|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits Co      |Ammy Winehouse, David Henderson, Leon Leonov, Leonard Cohen, Luke Skywalker|\n",
      "|7d4b212e-29e5-4f2a-9b28-745a3c7f0b60|Organic Veggies Ltd  |Ammy Winehouse, David Henderson, Leonard Cohen                             |\n",
      "|9851fa89-7b7a-4ed5-89f7-65c20599e0d2|Fruit Market Ltd     |Ammy Winehouse, David Henderson, Leonard Cohen                             |\n",
      "|83df789a-b30c-4a1b-8e67-1f512bfa20c7|Tropical Fresh Co    |Ammy Winehouse, David Henderson, Leonard Cohen                             |\n",
      "|1f06b236-f6b5-4f48-8c1c-7b55b5c7d6f7|Green Farms Inc      |Ammy Winehouse, Leon Leonov                                                |\n",
      "|9b31b19f-69a2-4aeb-8f6e-f4b8d2f9c12a|Veggies Unlimited    |Ammy Winehouse, Leon Leonov                                                |\n",
      "|9e25a3d7-46b8-4c9d-b805-2f6c3be6f5a0|Healthy Organics Co  |Ammy Winehouse, Leon Leonov, Marie Curie                                   |\n",
      "|4a98d9ec-65f6-438f-9a0c-0d9e1a6f7c65|Fresh Berries Inc    |Ammy Winehouse, Leonard Cohen                                              |\n",
      "|2b42dcb7-bc74-4e56-93f8-7612d5061d5f|Healthy Greens Co    |Ammy Winehouse, Leonard Cohen, Marie Curie                                 |\n",
      "|2e90f2b1-d237-47a6-96e8-6d01c0d78c3e|Seafood Supplier GmbH|Ammy Winehouse, Leonard Cohen, Markus Söder                                |\n",
      "|0d09ae2b-d9a5-4d67-bb97-963be9379b4e|Healthy Eats Ltd     |Ammy Winehouse, Yuri Gagarin                                               |\n",
      "|012f20c6-00d5-4f45-999f-12e7639db623|Green World Ltd      |Chris Pratt, David Goliat                                                  |\n",
      "|5c17d142-4b21-4293-8a34-8dcd2bc24f82|Fresh Farms Ltd      |Chris Pratt, David Goliat, Marie Curie                                     |\n",
      "|acdb6f30-764f-404e-8b8e-7e7e3e6fa1a9|Organic Farms        |Chris Pratt, David Henderson, Leon Leonov, Leonard Cohen                   |\n",
      "+------------------------------------+---------------------+---------------------------------------------------------------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Company id\n",
    "# 1e2b47e6-499e-41c6-91d3-09d12dddfbbd Fresh Fruits Co\n",
    "# 27c59f76-5d26-4b82-a89b-59f8dfd2e9a7 Healthy Snacks\n",
    "# 20dfef10-8f4e-45a1-82fc-123f4ab2a4a5 Healthy Snacks Co\n",
    "\n",
    "# Execute Spark SQL\n",
    "df_3 = spark.sql(\"\"\"\n",
    "    SELECT \n",
    "        Company_id, \n",
    "        company_name, \n",
    "        CONCAT_WS(', ', SORT_ARRAY(COLLECT_LIST(salesowner))) AS list_salesowners\n",
    "    FROM salesowners_vw\n",
    "    --where company_id='1e2b47e6-499e-41c6-91d3-09d12dddfbbd'\n",
    "    --where company_id in ('27c59f76-5d26-4b82-a89b-59f8dfd2e9a7', '20dfef10-8f4e-45a1-82fc-123f4ab2a4a5')\n",
    "    GROUP BY Company_id, company_name\n",
    "    order by 3 asc\n",
    "\"\"\")\n",
    "\n",
    "# Show results\n",
    "df_3.show(truncate=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2344a4a-5527-4036-9a56-d88ebe8f00b9",
   "metadata": {},
   "source": [
    "# Create a Salesowners Commission View (sales_owner_commission_vw)\n",
    "\n",
    "## Create a view of sales owners. \n",
    "## Highlevel Approach:\n",
    "- Identify the primary sales owner, Co-owner 1 (second in the list), Co-owner 2 (third in the list) who have contributed to the acquisition process.\n",
    "- Join Orders and Invoices based on the order ID, and get the invoiced value.\n",
    "      * - Assumption: VAT is not included in the  calculation as the details are not clear. * \n",
    "- Calculate the commissions based on the below procedure:\n",
    "    1. Main Owner: 6% of the net invoiced value.\n",
    "    2. Co-owner 1 (second in the list): 2.5% of the net invoiced value.\n",
    "    3. Co-owner 2 (third in the list): 0.95% of the net invoiced value.\n",
    "    4. The rest of the co-owners do not receive anything.\n",
    "- Raw amounts are represented in cents. Provide euro amounts with two decimal places in the results\n",
    "- Columns for the view:\n",
    "        Order_id,\n",
    "        Company_id,\n",
    "        company_name,\n",
    "        primary_owner,\n",
    "        co_owner_1,\n",
    "        co_owner_2,\n",
    "        invoice_id,\n",
    "        gross_value,\n",
    "        primary_commission_euro,\n",
    "        co_owner_1_commission_euro,\n",
    "        co_owner_2_commission_euro\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a67e34a7-bbbc-4d90-98a9-5ec271b1158f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------------------------+------------------------------------+---------------------+-----------------+---------------+-----------------+------------------------------------+-----------+---+-----------------------+--------------------------+--------------------------+\n",
      "|Order_id                            |Company_id                          |company_name         |primary_owner    |co_owner_1     |co_owner_2       |invoice_id                          |gross_value|vat|primary_commission_euro|co_owner_1_commission_euro|co_owner_2_commission_euro|\n",
      "+------------------------------------+------------------------------------+---------------------+-----------------+---------------+-----------------+------------------------------------+-----------+---+-----------------------+--------------------------+--------------------------+\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d479|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits Co      |Leonard Cohen    |Luke Skywalker |Ammy Winehouse   |e1e1e1e1-e1e1-e1e1-e1e1-e1e1e1e1e1e1|324222     |0  |194.53                 |81.06                     |30.8                      |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d480|0f05a8f1-2bdf-4be7-8c82-4c9b58f04898|Veggies Inc          |Luke Skywalker   |David Goliat   |Leon Leonov      |e2e2e2e2-e2e2-e2e2-e2e2-e2e2e2e2e2e2|193498     |19 |116.1                  |48.37                     |18.38                     |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d481|1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits c.o     |Luke Skywalker   |NULL           |NULL             |e3e3e3e3-e3e3-e3e3-e3e3-e3e3e3e3e3e3|345498     |21 |207.3                  |0.0                       |0.0                       |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d482|1c4b0b50-1d5d-463a-b56e-1a6fd3aeb7d6|Seafood Supplier     |David Goliat     |Leonard Cohen  |NULL             |e4e4e4e4-e4e4-e4e4-e4e4-e4e4e4e4e4e4|245412     |34 |147.25                 |61.35                     |0.0                       |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d483|34538e39-cd2e-4641-8d24-3c94146e6f16|Meat Packers Ltd     |Chris Pratt      |David Henderson|Marianov Merschik|e5e5e5e5-e5e5-e5e5-e5e5-e5e5e5e5e5e5|145467     |0  |87.28                  |36.37                     |13.82                     |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d484|fa14c3ed-3c48-49f4-bd69-4d7f5b5f4b1b|Green Veg Co         |Leonard Cohen    |David Henderson|NULL             |e6e6e6e6-e6e6-e6e6-e6e6-e6e6e6e6e6e6|581530     |19 |348.92                 |145.38                    |0.0                       |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d485|2e90f2b1-d237-47a6-96e8-6d01c0d78c3e|Seafood Supplier GmbH|Markus Söder     |Ammy Winehouse |NULL             |e7e7e7e7-e7e7-e7e7-e7e7-e7e7e7e7e7e7|45100      |19 |27.06                  |11.28                     |0.0                       |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d486|acdb6f30-764f-404e-8b8e-7e7e3e6fa1a9|Organic Farms        |David Henderson  |Leonard Cohen  |Leon Leonov      |e8e8e8e8-e8e8-e8e8-e8e8-e8e8e8e8e8e8|565210     |21 |339.13                 |141.3                     |53.69                     |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d487|5f0bdbdf-1d84-4c23-957c-8bb8c0ddc89d|Tropical Fruits Ltd  |Yuri Gagarin     |David Goliat   |David Henderson  |ea9ea9ea-9ea9-9ea9-9ea9-9ea9ea9ea9ea|345310     |34 |207.19                 |86.33                     |32.8                      |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d487|5f0bdbdf-1d84-4c23-957c-8bb8c0ddc89d|Tropical Fruits Ltd  |Yuri Gagarin     |David Goliat   |David Henderson  |e9e9e9e9-e9e9-e9e9-e9e9-e9e9e9e9e9e9|345310     |34 |207.19                 |86.33                     |32.8                      |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d488|27c59f76-5d26-4b82-a89b-59f8dfd2e9a7|Healthy Snacks       |Ammy Winehouse   |Marie Curie    |Chris Pratt      |eb0eb0eb-0eb0-0eb0-0eb0-0eb0eb0eb0eb|341315     |21 |204.79                 |85.33                     |32.42                     |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d489|20dfef10-8f4e-45a1-82fc-123f4ab2a4a5|healthy snacks c.o.  |Marianov Merschik|Vladimir Chukov|Luke Skywalker   |ec1ec1ec-1ec1-1ec1-1ec1-1ec1ec1ec1ec|291315     |0  |174.79                 |72.83                     |27.67                     |\n",
      "+------------------------------------+------------------------------------+---------------------+-----------------+---------------+-----------------+------------------------------------+-----------+---+-----------------------+--------------------------+--------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Company id\n",
    "# 1e2b47e6-499e-41c6-91d3-09d12dddfbbd Fresh Fruits Co\n",
    "# 27c59f76-5d26-4b82-a89b-59f8dfd2e9a7 Healthy Snacks\n",
    "# 20dfef10-8f4e-45a1-82fc-123f4ab2a4a5 Healthy Snacks Co\n",
    "\n",
    "# Execute Spark SQL\n",
    "df_sales_owner_commission = spark.sql(\"\"\"\n",
    "    with get_salesowners as \n",
    "    (\n",
    "        SELECT \n",
    "            Order_id,\n",
    "            Company_id, \n",
    "            company_name, \n",
    "            salesowners\n",
    "        FROM orders_vw \n",
    "            --where company_id='1e2b47e6-499e-41c6-91d3-09d12dddfbbd'\n",
    "            --where company_id in ('27c59f76-5d26-4b82-a89b-59f8dfd2e9a7', '20dfef10-8f4e-45a1-82fc-123f4ab2a4a5')\n",
    "    ),\n",
    "    sales_commission_team as\n",
    "     (\n",
    "         SELECT \n",
    "            Order_id,\n",
    "            Company_id,\n",
    "            company_name,\n",
    "            SPLIT(salesowners, ', ')[0] AS primary_owner,\n",
    "            SPLIT(salesowners, ', ')[1] AS co_owner_1,\n",
    "            SPLIT(salesowners, ', ')[2] AS co_owner_2\n",
    "        FROM get_salesowners\n",
    "        ), \n",
    "    get_invoice \n",
    "    (\n",
    "        SELECT \n",
    "            sct.Order_id,\n",
    "            sct.Company_id,\n",
    "            sct.company_name,\n",
    "            sct.primary_owner,\n",
    "            sct.co_owner_1,\n",
    "            sct.co_owner_2,\n",
    "            inv.invoice_id,\n",
    "            inv.gross_value,\n",
    "            inv.vat\n",
    "        from sales_commission_team sct inner join invoices inv on sct.Order_id=inv.order_id           \n",
    "    )\n",
    "    select \n",
    "        Order_id,\n",
    "        Company_id,\n",
    "        company_name,\n",
    "        primary_owner,\n",
    "        co_owner_1,\n",
    "        co_owner_2,\n",
    "        invoice_id,\n",
    "        gross_value,\n",
    "        vat,\n",
    "        (case when primary_owner is not null \n",
    "            then round((gross_value * .06)/100,2) else 0 end) as primary_commission_euro,\n",
    "        (case when co_owner_1 is not null \n",
    "            then round((gross_value * .025)/100,2) else 0 end) as co_owner_1_commission_euro,\n",
    "        (case when co_owner_2 is not null \n",
    "            then round((gross_value * .0095)/100,2) else 0 end) as co_owner_2_commission_euro\n",
    "    from get_invoice\n",
    "        \"\"\")\n",
    "\n",
    "# Show the result\n",
    "df_sales_owner_commission.show(truncate=False)\n",
    "\n",
    "df_sales_owner_commission.createOrReplaceTempView(\"sales_owner_commission_vw\")\n",
    "\n",
    "#df_3.show(truncate=False)\n",
    "\n",
    "#df_3.show(truncate=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b5149da-72a6-4bd6-81bd-df3905c212b3",
   "metadata": {},
   "source": [
    "# Test 4: Calculation of Sales Team Commissions\n",
    "\n",
    "### Requirements:\n",
    "    - Provide a list of the distinct sales owners and their respective commission earnings. \n",
    "    - The list should be sorted in order of descending performance, with the sales owners who have generated the highest commissions appearing first.\n",
    "    - Raw amounts are represented in cents. Please provide euro amounts with two decimal places in the results \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ac705b76-b592-4d6a-a8a6-ebc3e729836f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------------+----------------+\n",
      "|sales_owner      |total_commission|\n",
      "+-----------------+----------------+\n",
      "|Leonard Cohen    |746.1           |\n",
      "|David Henderson  |586.48          |\n",
      "|Luke Skywalker   |432.13          |\n",
      "|Yuri Gagarin     |414.38          |\n",
      "|David Goliat     |368.28          |\n",
      "|Ammy Winehouse   |246.87          |\n",
      "|Marianov Merschik|188.61          |\n",
      "|Chris Pratt      |119.7           |\n",
      "|Marie Curie      |85.33           |\n",
      "|Vladimir Chukov  |72.83           |\n",
      "|Leon Leonov      |72.07           |\n",
      "|Markus Söder     |27.06           |\n",
      "+-----------------+----------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Company id\n",
    "# 1e2b47e6-499e-41c6-91d3-09d12dddfbbd Fresh Fruits Co\n",
    "# 27c59f76-5d26-4b82-a89b-59f8dfd2e9a7 Healthy Snacks\n",
    "# 20dfef10-8f4e-45a1-82fc-123f4ab2a4a5 Healthy Snacks Co\n",
    "\n",
    "# Execute Spark SQL\n",
    "df_total_sales_comm = spark.sql(\"\"\"\n",
    "        with aa as (\n",
    "            select \n",
    "             primary_owner, co_owner_1, co_owner_2, gross_value, primary_commission_euro, \n",
    "             co_owner_1_commission_euro, co_owner_2_commission_euro\n",
    "            from sales_owner_commission_vw\n",
    "                --where company_id='1e2b47e6-499e-41c6-91d3-09d12dddfbbd'\n",
    "                --where company_id in ('27c59f76-5d26-4b82-a89b-59f8dfd2e9a7', '20dfef10-8f4e-45a1-82fc-123f4ab2a4a5') \n",
    "            ),\n",
    "            bb as (\n",
    "            SELECT primary_owner AS sales_owner, primary_commission_euro AS commission \n",
    "            FROM aa\n",
    "            WHERE primary_owner IS NOT NULL\n",
    "            \n",
    "            UNION ALL\n",
    "            \n",
    "            SELECT co_owner_1 AS sales_owner, co_owner_1_commission_euro AS commission \n",
    "            FROM aa\n",
    "            WHERE co_owner_1 IS NOT NULL\n",
    "            \n",
    "            UNION ALL\n",
    "            \n",
    "            SELECT co_owner_2 AS sales_owner, co_owner_2_commission_euro AS commission \n",
    "            FROM aa\n",
    "            WHERE co_owner_2 IS NOT NULL\n",
    "            )\n",
    "            select sales_owner, round(sum(commission), 2) as total_commission\n",
    "            from bb\n",
    "            group by 1\n",
    "            order by 2 desc\n",
    "             \"\"\")   \n",
    "\n",
    "# Show results\n",
    "df_total_sales_comm.show(truncate=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1575a253-b1bf-4af3-8f5c-edaf35c52fbe",
   "metadata": {},
   "source": [
    "## Test 6: Data Visualization. \n",
    "\n",
    "    The Sales team wants to understand which sales owners are particularly successful in creating orders in plastic crates. Create a set of appropriate visualizations / reports that help your stakeholders to understand the following aspects better:\n",
    "\n",
    "    1. What is the distribtion of orders by crate type.\n",
    "    2. Which sales owners need most training to improve selling on plastic crates, based on the last 12 months orders.\n",
    "    3. Understand who are by month the top 5 performers selling plastic crates for a rolling 3 months evaluation window.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b0508f7-00b9-4677-bf88-bd7d00425223",
   "metadata": {},
   "source": [
    "### Create data set for \"What is the distribtion of orders by crate type.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "370821dd-d6fb-48b1-8952-b03e4e1eff03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------+-----------+\n",
      "|crate_type|order_count|\n",
      "+----------+-----------+\n",
      "|Metal     |19         |\n",
      "|Plastic   |26         |\n",
      "|Wood      |17         |\n",
      "+----------+-----------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_crate_order = spark.sql(\"SELECT crate_type, count(order_id) as order_count FROM orders_vw group by 1\")\n",
    "\n",
    "df_crate_order.show(truncate=False)\n",
    "\n",
    "# Convert to Pandas for Streamlit\n",
    "df_crate_order_distribution = df_crate_order.toPandas()\n",
    "\n",
    "# Save DataFrame as CSV inside the container\n",
    "df_crate_order_distribution.to_csv(\"data/crate_order_distribution.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41528a91-c289-469f-971a-e656d340a68a",
   "metadata": {},
   "source": [
    "### Create a Order_Sales_owner View (order_sales_owner_vw)\n",
    "\n",
    "#### Create a normalized view of sales owners and orders. \n",
    "    Columns:\n",
    "        order_id, \n",
    "        date, \n",
    "        company_id,\n",
    "        company_name, \n",
    "        crate_type,\n",
    "        contact_name,  \n",
    "        contact_surname, \n",
    "        contact_full_name,\n",
    "        contact_city, \n",
    "        contact_cp, \n",
    "        salesowner (one sale owner per row) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "eb61e53c-c0a6-4fc8-ad6a-982be640994b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------------------------+--------------+-----+------------------------------------+-------------------+----------+------------+---------------+-----------------+----------------------+----------+---------------+\n",
      "|order_id                            |formatted_date|month|company_id                          |company_name       |crate_type|contact_name|contact_surname|contact_full_name|contact_city          |contact_cp|salesowner     |\n",
      "+------------------------------------+--------------+-----+------------------------------------+-------------------+----------+------------+---------------+-----------------+----------------------+----------+---------------+\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d502|2023-07-24    |7    |9e25a3d7-46b8-4c9d-b805-2f6c3be6f5a0|Healthy Organics Co|Wood      |Clark       |Kent           |Clark Kent       |Metropolis            |UNK00     |Leon Leonov    |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d510|2024-02-13    |2    |4a7561b1-1de1-420a-93ed-2c12a5bbd1ab|Farms Global Co    |Metal     |Natalia     |Romanov        |Natalia Romanov  |Moscow                |65432     |Leonard Cohen  |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d509|2024-01-30    |1    |0d09ae2b-d9a5-4d67-bb97-963be9379b4e|Healthy Eats Ltd   |Plastic   |Tony        |Stark          |Tony Stark       |New York              |UNK00     |Yuri Gagarin   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d500|2023-05-08    |5    |8f1c5d4a-9045-4be5-bb38-7f587f478a92|Farm Fresh Co      |Metal     |Selina      |Kyle           |Selina Kyle      |Gotham                |UNK00     |Ammy Winehouse |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d513|2024-04-10    |4    |c672f19b-f08b-4e11-b0f5-791ea8273d85|Global Veggies Inc |Metal     |Maria       |Theresa        |Maria Theresa    |Calcutta              |UNK00     |Yuri Gagarin   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d516|2024-07-03    |7    |f712dc3d-4681-4ec6-9b76-bf47b4ccf5b2|Green Organic Co   |Metal     |Bruce       |Wayne          |Bruce Wayne      |Gotham                |UNK00     |Chris Pratt    |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d487|2022-09-04    |9    |5f0bdbdf-1d84-4c23-957c-8bb8c0ddc89d|Tropical Fruits Ltd|Plastic   |Liav        |Ichenbaum      |Liav Ichenbaum   |Tel Aviv              |UNK00     |David Henderson|\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d494|2022-11-15    |11   |d4e31b02-ea50-46b7-a8a1-43fdbb06e3fa|Global Seafood Co  |Metal     |Tony        |Stark          |Tony Stark       |New York              |UNK00     |Leonard Cohen  |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d525|2025-02-19    |2    |fa14c3ed-3c48-49f4-bd69-4d7f5b5f4b1b|Green Veg Co       |Wood      |John        |Krasinski      |John Krasinski   |New York              |1203      |David Henderson|\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d506|2023-11-29    |11   |7f80fdd9-1c1a-4ad4-9348-19e6b2b44bde|Veggie Haven Co    |Plastic   |Steve       |Rogers         |Steve Rogers     |Brooklyn              |UNK00     |Chris Pratt    |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d495|2022-12-28    |12   |5c17d142-4b21-4293-8a34-8dcd2bc24f82|Fresh Farms Ltd    |Wood      |Diana       |Prince         |Diana Prince     |Themyscira            |45789     |Marie Curie    |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d486|2022-04-01    |4    |acdb6f30-764f-404e-8b8e-7e7e3e6fa1a9|Organic Farms      |Metal     |Jennifer    |Lopez          |Jennifer Lopez   |Esplugues de Llobregat|UNK00     |Leonard Cohen  |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d507|2023-12-07    |12   |992c1e6e-7740-4116-9d16-7c12b9e498d3|Seafood Global Inc |Metal     |Peter       |Parker         |Peter Parker     |Queens                |11432     |David Henderson|\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d528|2025-03-12    |3    |5f0bdbdf-1d84-4c23-957c-8bb8c0ddc89d|Tropical Fruits Ltd|Plastic   |Liav        |Ichenbaum      |Liav Ichenbaum   |Tel Aviv              |UNK00     |Yuri Gagarin   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d535|2025-05-06    |5    |fa14c3ed-3c48-49f4-bd69-4d7f5b5f4b1b|Green Veg Co       |Wood      |John        |Krasinski      |John Krasinski   |New York              |1203      |Ammy Winehouse |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d494|2022-11-15    |11   |d4e31b02-ea50-46b7-a8a1-43fdbb06e3fa|Global Seafood Co  |Metal     |Tony        |Stark          |Tony Stark       |New York              |UNK00     |Yuri Gagarin   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d491|2022-08-12    |8    |f3b70f8d-bb74-4d96-b1f2-88e5c0c68b14|Meat Express Ltd   |Metal     |Bruce       |Wayne          |Bruce Wayne      |Gotham                |UNK00     |Yuri Gagarin   |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d495|2022-12-28    |12   |5c17d142-4b21-4293-8a34-8dcd2bc24f82|Fresh Farms Ltd    |Wood      |Diana       |Prince         |Diana Prince     |Themyscira            |45789     |Chris Pratt    |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d540|2025-06-15    |6    |1e2b47e6-499e-41c6-91d3-09d12dddfbbd|Fresh Fruits Co    |Wood      |Curtis      |Jackson        |Curtis Jackson   |Chicago               |12345     |Ammy Winehouse |\n",
      "|f47ac10b-58cc-4372-a567-0e02b2c3d525|2025-02-19    |2    |fa14c3ed-3c48-49f4-bd69-4d7f5b5f4b1b|Green Veg Co       |Wood      |John        |Krasinski      |John Krasinski   |New York              |1203      |Leonard Cohen  |\n",
      "+------------------------------------+--------------+-----+------------------------------------+-------------------+----------+------------+---------------+-----------------+----------------------+----------+---------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Company id\n",
    "# 1e2b47e6-499e-41c6-91d3-09d12dddfbbd Fresh Fruits Co\n",
    "# 27c59f76-5d26-4b82-a89b-59f8dfd2e9a7 Healthy Snacks\n",
    "# 20dfef10-8f4e-45a1-82fc-123f4ab2a4a5 Healthy Snacks Co\n",
    "\n",
    "\n",
    "# Execute Spark SQL\n",
    "df_order_sales_owner = spark.sql(\"\"\"\n",
    "    with aa as \n",
    "    (\n",
    "        SELECT \n",
    "            order_id, \n",
    "            date, \n",
    "            company_id,\n",
    "            company_name, \n",
    "            crate_type,\n",
    "            contact_name,  \n",
    "            contact_surname, \n",
    "            contact_full_name,\n",
    "            contact_city, \n",
    "            contact_cp, \n",
    "            EXPLODE(SPLIT(salesowners, ', ')) AS salesowner\n",
    "        FROM orders_vw \n",
    "            --where company_id='1e2b47e6-499e-41c6-91d3-09d12dddfbbd'\n",
    "            --where company_id in ('27c59f76-5d26-4b82-a89b-59f8dfd2e9a7', '20dfef10-8f4e-45a1-82fc-123f4ab2a4a5')\n",
    "        )\n",
    "        SELECT distinct \n",
    "            order_id, \n",
    "            CAST(TO_TIMESTAMP(date, 'dd.MM.yy') AS DATE) as formatted_date, \n",
    "            month(CAST(TO_TIMESTAMP(date, 'dd.MM.yy') AS DATE)) as month,\n",
    "            company_id,\n",
    "            company_name, \n",
    "            crate_type,\n",
    "            contact_name,  \n",
    "            contact_surname, \n",
    "            contact_full_name,\n",
    "            contact_city, \n",
    "            contact_cp, \n",
    "            TRIM(salesowner) AS salesowner\n",
    "        FROM aa\n",
    "    \"\"\")\n",
    "\n",
    "# Show the result\n",
    "df_order_sales_owner.show(truncate=False)\n",
    "\n",
    "df_order_sales_owner.createOrReplaceTempView(\"order_sales_owner_vw\")\n",
    "\n",
    "#df_3.show(truncate=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cad1a6fb-805a-4c05-a179-91d19ceb51e3",
   "metadata": {},
   "source": [
    "### Create data set for \"Which sales owners need most training to improve selling on plastic crates, based on the last 12 months orders?\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cb384cbe-ddde-4ac9-8835-0621417097ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------------+----------+-----------+\n",
      "|salesowner       |crate_type|order_count|\n",
      "+-----------------+----------+-----------+\n",
      "|Marianov Merschik|Plastic   |2          |\n",
      "|Yuri Gagarin     |Plastic   |2          |\n",
      "|David Goliat     |Wood      |3          |\n",
      "|Ammy Winehouse   |Metal     |3          |\n",
      "|David Henderson  |Metal     |3          |\n",
      "|David Goliat     |Metal     |2          |\n",
      "|Marianov Merschik|Wood      |1          |\n",
      "|Leonard Cohen    |Wood      |3          |\n",
      "|Chris Pratt      |Metal     |2          |\n",
      "|Markus Söder     |Metal     |1          |\n",
      "|Ammy Winehouse   |Plastic   |4          |\n",
      "|David Henderson  |Plastic   |4          |\n",
      "|Yuri Gagarin     |Metal     |2          |\n",
      "|Luke Skywalker   |Wood      |2          |\n",
      "|Luke Skywalker   |Metal     |1          |\n",
      "|Leon Leonov      |Plastic   |2          |\n",
      "|Leon Leonov      |Wood      |3          |\n",
      "|David Goliat     |Plastic   |3          |\n",
      "|Leonard Cohen    |Metal     |4          |\n",
      "|Chris Pratt      |Plastic   |6          |\n",
      "+-----------------+----------+-----------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Company id\n",
    "# 1e2b47e6-499e-41c6-91d3-09d12dddfbbd Fresh Fruits Co\n",
    "# 27c59f76-5d26-4b82-a89b-59f8dfd2e9a7 Healthy Snacks\n",
    "# 20dfef10-8f4e-45a1-82fc-123f4ab2a4a5 Healthy Snacks Co\n",
    "\n",
    "# Execute Spark SQL\n",
    "df_7 = spark.sql(\"\"\"\n",
    "        SELECT \n",
    "            salesowner,\n",
    "            crate_type,\n",
    "            count(order_id) as order_count\n",
    "        FROM order_sales_owner_vw \n",
    "            where formatted_date >= add_months(current_date(), -12)\n",
    "            -- and company_id='1e2b47e6-499e-41c6-91d3-09d12dddfbbd'\n",
    "            --where company_id in ('27c59f76-5d26-4b82-a89b-59f8dfd2e9a7', '20dfef10-8f4e-45a1-82fc-123f4ab2a4a5')\n",
    "        group by 1,2\n",
    "  \"\"\")\n",
    "\n",
    "# Show the result\n",
    "df_7.show(truncate=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c9769375-5a79-4b81-a6a4-0665b384cddd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write DataFrame to CSV\n",
    "# Convert to Pandas for Streamlit\n",
    "df_crate_sale_dist = df_7.toPandas()\n",
    "\n",
    "# Save DataFrame as CSV inside the container\n",
    "df_crate_sale_dist.to_csv(\"data/crate_sale_distribution.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f102188a-e6d1-4f06-99ed-7dfa78a5bd57",
   "metadata": {},
   "source": [
    "### Create data set for \"Understand who are by month the top 5 performers selling plastic crates for a rolling 3 months evaluation window?\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ec86c755-3a34-4b30-a96c-63e4d4684977",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+---------------+-----------+\n",
      "|month|salesowner     |total_sales|\n",
      "+-----+---------------+-----------+\n",
      "|3    |Ammy Winehouse |2          |\n",
      "|3    |David Henderson|2          |\n",
      "|4    |Leonard Cohen  |2          |\n",
      "|1    |Leonard Cohen  |1          |\n",
      "|1    |David Goliat   |1          |\n",
      "+-----+---------------+-----------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_8 = spark.sql(\"\"\"\n",
    "     WITH ranked_sales AS \n",
    "     (\n",
    "        SELECT\n",
    "            month,\n",
    "            salesowner,\n",
    "            crate_type,\n",
    "            count(order_id) AS total_sales,\n",
    "            ROW_NUMBER() OVER (PARTITION BY month ORDER BY count(order_id) DESC) AS rank\n",
    "        FROM\n",
    "                order_sales_owner_vw\n",
    "        WHERE\n",
    "            crate_type = 'Plastic'\n",
    "            and formatted_date >= add_months(current_date(), -12)\n",
    "            -- and company_id='1e2b47e6-499e-41c6-91d3-09d12dddfbbd'\n",
    "            -- company_id in ('27c59f76-5d26-4b82-a89b-59f8dfd2e9a7', '20dfef10-8f4e-45a1-82fc-123f4ab2a4a5')\n",
    "        group by 1,2,3\n",
    "        ),\n",
    "      rolling_sales AS \n",
    "      (\n",
    "            SELECT\n",
    "                month,\n",
    "                salesowner,\n",
    "                crate_type,\n",
    "                total_sales,\n",
    "                rank,\n",
    "                COUNT(*) OVER (PARTITION BY salesowner ORDER BY month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_sales\n",
    "            FROM\n",
    "                ranked_sales\n",
    "        )\n",
    "        SELECT\n",
    "            month,\n",
    "            salesowner,\n",
    "            total_sales\n",
    "        FROM\n",
    "            rolling_sales\n",
    "        WHERE\n",
    "            rank <= 5\n",
    "        ORDER BY\n",
    "            total_sales desc  \n",
    "        limit 5\n",
    "  \"\"\")\n",
    "\n",
    "# Show the result\n",
    "df_8.show(truncate=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "68604d67-e7af-435b-9418-7539bf04c681",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write DataFrame to CSV\n",
    "# Convert to Pandas for Streamlit\n",
    "df_top_5 = df_8.toPandas()\n",
    "\n",
    "# Save DataFrame as CSV inside the container\n",
    "df_top_5.to_csv(\"data/sales_top_5.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5f8ae038-7d18-4d38-bce6-eb349af4ce85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crate_order_distribution.csv  invoicing_data.json  sales_top_5.csv\n",
      "crate_sale_distribution.csv   orders.csv\n"
     ]
    }
   ],
   "source": [
    "!ls /app/data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ed2aaffb-0e47-4070-8248-568e9fb79ee0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/app\n"
     ]
    }
   ],
   "source": [
    "!pwd"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
